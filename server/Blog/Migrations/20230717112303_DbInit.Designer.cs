// <auto-generated />
using System;
using Blog.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Blog.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230717112303_DbInit")]
    partial class DbInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Blog.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PostId");

                    b.ToTable("comment");
                });

            modelBuilder.Entity("Blog.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("post");
                });

            modelBuilder.Entity("Blog.Entities.PostTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("TagId");

                    b.ToTable("post_tag");
                });

            modelBuilder.Entity("Blog.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d3a5a0f-20ef-4341-a732-9cc3b99119a8"),
                            CreatedAt = new DateTime(2023, 7, 17, 11, 23, 3, 44, DateTimeKind.Utc).AddTicks(7152),
                            Name = "programming",
                            UpdatedAt = new DateTime(2023, 7, 17, 11, 23, 3, 44, DateTimeKind.Utc).AddTicks(7155)
                        },
                        new
                        {
                            Id = new Guid("dc40283f-b295-4947-bd70-089222737c11"),
                            CreatedAt = new DateTime(2023, 7, 17, 11, 23, 3, 44, DateTimeKind.Utc).AddTicks(7157),
                            Name = "c#",
                            UpdatedAt = new DateTime(2023, 7, 17, 11, 23, 3, 44, DateTimeKind.Utc).AddTicks(7158)
                        },
                        new
                        {
                            Id = new Guid("751725cf-c32b-408b-bbec-8e5bc29bf99c"),
                            CreatedAt = new DateTime(2023, 7, 17, 11, 23, 3, 44, DateTimeKind.Utc).AddTicks(7159),
                            Name = "sql",
                            UpdatedAt = new DateTime(2023, 7, 17, 11, 23, 3, 44, DateTimeKind.Utc).AddTicks(7160)
                        },
                        new
                        {
                            Id = new Guid("df7f19b4-11d5-4ed8-89f4-1082a12a635a"),
                            CreatedAt = new DateTime(2023, 7, 17, 11, 23, 3, 44, DateTimeKind.Utc).AddTicks(7161),
                            Name = "html",
                            UpdatedAt = new DateTime(2023, 7, 17, 11, 23, 3, 44, DateTimeKind.Utc).AddTicks(7162)
                        },
                        new
                        {
                            Id = new Guid("38f0acc1-2f37-4efd-a514-7cf7cb5f210c"),
                            CreatedAt = new DateTime(2023, 7, 17, 11, 23, 3, 44, DateTimeKind.Utc).AddTicks(7163),
                            Name = "css",
                            UpdatedAt = new DateTime(2023, 7, 17, 11, 23, 3, 44, DateTimeKind.Utc).AddTicks(7164)
                        },
                        new
                        {
                            Id = new Guid("8a2790bb-96b0-4830-9d29-526b3aa73811"),
                            CreatedAt = new DateTime(2023, 7, 17, 11, 23, 3, 44, DateTimeKind.Utc).AddTicks(7166),
                            Name = "javascript",
                            UpdatedAt = new DateTime(2023, 7, 17, 11, 23, 3, 44, DateTimeKind.Utc).AddTicks(7166)
                        },
                        new
                        {
                            Id = new Guid("ebd23296-b33a-472d-9156-a8a9fb12c68a"),
                            CreatedAt = new DateTime(2023, 7, 17, 11, 23, 3, 44, DateTimeKind.Utc).AddTicks(7168),
                            Name = "python",
                            UpdatedAt = new DateTime(2023, 7, 17, 11, 23, 3, 44, DateTimeKind.Utc).AddTicks(7169)
                        },
                        new
                        {
                            Id = new Guid("0b879c56-205d-488f-9fbf-11f5770e40e5"),
                            CreatedAt = new DateTime(2023, 7, 17, 11, 23, 3, 44, DateTimeKind.Utc).AddTicks(7170),
                            Name = "ci/cd",
                            UpdatedAt = new DateTime(2023, 7, 17, 11, 23, 3, 44, DateTimeKind.Utc).AddTicks(7170)
                        },
                        new
                        {
                            Id = new Guid("c16731db-b29e-4302-b655-3e7c7b132d12"),
                            CreatedAt = new DateTime(2023, 7, 17, 11, 23, 3, 44, DateTimeKind.Utc).AddTicks(7174),
                            Name = "react",
                            UpdatedAt = new DateTime(2023, 7, 17, 11, 23, 3, 44, DateTimeKind.Utc).AddTicks(7174)
                        },
                        new
                        {
                            Id = new Guid("2210856d-57c9-46f6-b161-55f458e4b3fe"),
                            CreatedAt = new DateTime(2023, 7, 17, 11, 23, 3, 44, DateTimeKind.Utc).AddTicks(7176),
                            Name = "frontend",
                            UpdatedAt = new DateTime(2023, 7, 17, 11, 23, 3, 44, DateTimeKind.Utc).AddTicks(7176)
                        },
                        new
                        {
                            Id = new Guid("9cfae79f-c8af-4f2d-b982-d11f370b87de"),
                            CreatedAt = new DateTime(2023, 7, 17, 11, 23, 3, 44, DateTimeKind.Utc).AddTicks(7178),
                            Name = "backend",
                            UpdatedAt = new DateTime(2023, 7, 17, 11, 23, 3, 44, DateTimeKind.Utc).AddTicks(7178)
                        });
                });

            modelBuilder.Entity("Blog.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Blog.Entities.UsersInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("users_info");
                });

            modelBuilder.Entity("Blog.Entities.Comment", b =>
                {
                    b.HasOne("Blog.Entities.User", "Owner")
                        .WithMany("Comments")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Blog.Entities.Post", b =>
                {
                    b.HasOne("Blog.Entities.User", "Owner")
                        .WithMany("Posts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Blog.Entities.PostTag", b =>
                {
                    b.HasOne("Blog.Entities.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog.Entities.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Blog.Entities.UsersInfo", b =>
                {
                    b.HasOne("Blog.Entities.User", "User")
                        .WithOne("UsersInfo")
                        .HasForeignKey("Blog.Entities.UsersInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blog.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("Blog.Entities.Tag", b =>
                {
                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("Blog.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");

                    b.Navigation("UsersInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
